{"version":3,"sources":["utils/spoitfy.ts","components/album/Album.tsx","components/app/App.tsx","serviceWorker.ts","index.tsx"],"names":["Spotify","Object","classCallCheck","this","client","auth","SpotifyWebApi","createClass","key","value","access_token","window","location","hash","substring","split","setAccessToken","href","concat","join","query","searchTracks","Album","props","react_default","a","createElement","className","src","img","alt","App","_useState","useState","_useState2","slicedToArray","setQuery","_useState3","_useState4","setImg","spotify","useRef","useEffect","current","isAuthenticated","authenticateUser","type","onChange","e","target","onClick","length","searchTrack","then","data","tracks","items","album","images","url","xmlns","width","height","viewBox","d","components_album_Album","Boolean","hostname","match","ReactDOM","render","components_app_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iRAEaA,EAAb,WAIE,SAAAA,IAAeC,OAAAC,EAAA,EAAAD,CAAAE,KAAAH,GAAAG,KAHPC,YAGM,EAAAD,KAFNE,MAAgB,EAGtBF,KAAKC,OAAS,IAAIE,IALtB,OAAAL,OAAAM,EAAA,EAAAN,CAAAD,EAAA,EAAAQ,IAAA,mBAAAC,MAAA,WASI,IAAMC,EAAeC,OAAOC,SAASC,KAClCC,UAAU,GACVC,MAAM,KAAK,GACXA,MAAM,KAAK,GACdJ,OAAOC,SAASC,KAAO,GAUlBH,GAGHP,KAAKC,OAAOY,eAAeN,GAC3BP,KAAKE,MAAO,GAHZM,OAAOC,SAASK,KAAhB,GAAAC,OATmB,yCASnB,eAAAA,OARe,mCAQf,kBAAAA,OAP0D,2CAO1D,WAAAA,OANa,CACb,iBAKyGC,KAAK,OAA9G,2CAxBN,CAAAX,IAAA,cAAAC,MAAA,SA+BcW,GACV,OAAOjB,KAAKC,OAAOiB,aAAaD,KAhCpC,CAAAZ,IAAA,kBAAAC,MAAA,WAoCI,OAAON,KAAKE,SApChBL,EAAA,GCaesB,eARqB,SAAAC,GAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,IAAKC,IAAK,QCwCjBC,EA3CO,WAAM,IAAAC,EACAC,mBAAS,IADTC,EAAAjC,OAAAkC,EAAA,EAAAlC,CAAA+B,EAAA,GACnBZ,EADmBc,EAAA,GACZE,EADYF,EAAA,GAAAG,EAEJJ,mBAAS,IAFLK,EAAArC,OAAAkC,EAAA,EAAAlC,CAAAoC,EAAA,GAEnBR,EAFmBS,EAAA,GAEdC,EAFcD,EAAA,GAGpBE,EAAUC,iBAAO,IAAIzC,GAE3B0C,oBAAU,WACHF,EAAQG,QAAQC,mBAAmBJ,EAAQG,QAAQE,oBACvD,IAgBH,OACErB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOoB,KAAK,OAAOrC,MAAOW,EAAO2B,SAjBP,SAAAC,GAC9BZ,EAASY,EAAEC,OAAOxC,UAiBde,EAAAC,EAAAC,cAAA,UAAQwB,QAdM,WACJ,OAAV9B,GAA4B,KAAVA,GAAgBA,EAAM+B,OAAS,GACnDX,EAAQG,QAAQS,YAAYhC,GAAOiC,KAAK,SAAAC,GAClCA,EAAKC,OAAOC,MAAML,OAAS,GAC7BZ,EAAOe,EAAKC,OAAOC,MAAM,GAAGC,MAAMC,OAAO,GAAGC,SAW5CnC,EAAAC,EAAAC,cAAA,OACEkC,MAAM,6BACNC,MAAM,KACNC,OAAO,KACPC,QAAQ,aAERvC,EAAAC,EAAAC,cAAA,QAAMsC,EAAE,8BAIdxC,EAAAC,EAAAC,cAACuC,EAAD,CAAOpC,IAAKA,MCjCEqC,QACW,cAA7BvD,OAAOC,SAASuD,UAEe,UAA7BxD,OAAOC,SAASuD,UAEhBxD,OAAOC,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.97698287.chunk.js","sourcesContent":["import SpotifyWebApi from 'spotify-web-api-js'\n\nexport class Spotify {\n  private client: SpotifyWebApi.SpotifyWebApiJs\n  private auth: boolean = false\n\n  constructor() {\n    this.client = new SpotifyWebApi()\n  }\n\n  authenticateUser() {\n    const access_token = window.location.hash\n      .substring(1)\n      .split('&')[0]\n      .split('=')[1]\n    window.location.hash = ''\n\n    const authEndpoint = 'https://accounts.spotify.com/authorize'\n    const clientId = '41e10dc3f3594667b190b3681fdee8ca'\n    const redirectUri = process.env.NODE_ENV === 'production' ? 'https://pipas.github.io/SpotifyRoulette/' : 'http://192.168.1.10:3000/'\n    const scopes = [\n      'user-top-read'\n    ];\n\n    // If there is no token, redirect to Spotify authorization\n    if (!access_token) {\n      window.location.href = `${authEndpoint}?client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`\n    } else {\n      this.client.setAccessToken(access_token)\n      this.auth = true\n    }\n  }\n\n  searchTrack(query: string): Promise<SpotifyApi.TrackSearchResponse> {\n    return this.client.searchTracks(query)\n  }\n\n  isAuthenticated() {\n    return this.auth\n  }\n}\n","import React from 'react'\nimport './Album.css'\n\ntype AlbumProps = {\n  img: string\n}\n\nconst Album: React.FC<AlbumProps> = props => {\n  return (\n    <div className='album'>\n      <img src={props.img} alt={''}></img>\n    </div>\n  )\n}\n\nexport default Album\n","import React, { useEffect, useState, useRef } from 'react'\nimport { Spotify } from '../../utils/spoitfy'\nimport './App.css'\nimport Album from '../album/Album'\n\ntype onChange = (event: React.ChangeEvent<HTMLInputElement>) => void\n\nconst App: React.FC = () => {\n  const [query, setQuery] = useState('')\n  const [img, setImg] = useState('')\n  const spotify = useRef(new Spotify())\n  \n  useEffect(() => {\n    if (!spotify.current.isAuthenticated()) spotify.current.authenticateUser()\n  }, [])\n\n  const onQueryChange: onChange = e => {\n    setQuery(e.target.value)\n  }\n\n  const onPlayClick = () => {\n    if (query !== null && query !== '' && query.length > 3) {\n      spotify.current.searchTrack(query).then(data => {\n        if (data.tracks.items.length > 0) {\n          setImg(data.tracks.items[0].album.images[0].url)\n        }\n      })\n    }\n  }\n\n  return (\n    <div className='app'>\n      <div className='input'>\n        <input type='text' value={query} onChange={onQueryChange}></input>\n        <button onClick={onPlayClick}>\n          <svg\n            xmlns='http://www.w3.org/2000/svg'\n            width='24'\n            height='24'\n            viewBox='0 0 24 24'\n          >\n            <path d='M3 22v-20l18 10-18 10z' />\n          </svg>\n        </button>\n      </div>\n      <Album img={img} />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}